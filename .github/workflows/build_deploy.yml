name: CI

on:
  release:
    types: [published]

env:
  REGISTRY: 'registry.digitalocean.com/natimate-container-registry'
  IMAGE_NAME: 'my-decaf-life-site'

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Establish scp connection
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          source: 'docker-compose.yml'
          target: '/full_server_docker/my-decaf-life/'
          command_timeout: 60s

      - name: Create .env file
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL}}
          BREVO_TRANSACTIONAL_EMAILS_API_KEY: ${{ secrets.BREVO_TRANSACTIONAL_EMAILS_API_KEY}}
          SECRETKEY_SERVER_ONLY: ${{ secrets.SECRETKEY_SERVER_ONLY }}
          STRIPE_TEST_SECRET: ${{ secrets.STRIPE_TEST_SECRET }}
          STRIPE_WEBHOOK_TEST_SECRET: ${{ secrets.STRIPE_WEBHOOK_TEST_SECRET }}
          STRIPE_SECRET: ${{ secrets.STRIPE_SECRET }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          CUSTOMER_PORTAL_URL: ${{ secrets.CUSTOMER_PORTAL_URL }}
          CUSTOMER_PORTAL_URL_TEST: ${{ secrets.CUSTOMER_PORTAL_URL_TEST }}
        run: |
          touch .env
          echo "DATABASE_URL=$DATABASE_URL" >> .env
          echo "BREVO_TRANSACTIONAL_EMAILS_API_KEY=$BREVO_TRANSACTIONAL_EMAILS_API_KEY" >> .env
          echo "SECRETKEY_SERVER_ONLY=$SECRETKEY_SERVER_ONLY" >> .env
          echo "STRIPE_TEST_SECRET=$STRIPE_TEST_SECRET" >> .env
          echo "STRIPE_WEBHOOK_TEST_SECRET=$STRIPE_WEBHOOK_TEST_SECRET" >> .env
          echo "STRIPE_SECRET=$STRIPE_SECRET" >> .env
          echo "STRIPE_WEBHOOK_SECRET=$STRIPE_WEBHOOK_SECRET" >> .env
          echo "CUSTOMER_PORTAL_URL=$CUSTOMER_PORTAL_URL" >> .env
          echo "CUSTOMER_PORTAL_URL_TEST=$CUSTOMER_PORTAL_URL_TEST" >> .env
        shell: bash

      - name: Build container image
        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):${{ github.ref_name }} .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):${{ github.ref_name }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          database_url: ${{ secrets.DATABASE_URL}}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: IMAGE_NAME,REGISTRY,${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
          script: |
            # Login to registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            export SERVER_VERSION=${{ github.ref_name }}
            export DATABASE_URL=${{ secrets.DATABASE_URL}}
            history -c && history -w
            # Run a new container from a new image
            docker compose -f /full_server_docker/my-decaf-life/docker-compose.yml pull
            docker compose -f /full_server_docker/my-decaf-life/docker-compose.yml down
            docker compose -f /full_server_docker/my-decaf-life/docker-compose.yml up -d
